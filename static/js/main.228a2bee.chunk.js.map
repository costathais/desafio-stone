{"version":3,"sources":["components/SearchPage/index.js","components/ResultPage/index.js","App.js","serviceWorker.js","index.js"],"names":["SearchPage","useState","userName","setUserName","redirect","setRedirect","className","to","onSubmit","event","preventDefault","onChange","target","value","type","axios","defaults","baseURL","ResultPage","userData","setUserData","userRepos","setUserRepos","userId","useParams","useEffect","get","then","data","catch","console","log","class","src","avatar_url","alt","name","email","following","followers","bio","map","repo","key","href","html_url","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"+UAsCeA,G,MA9BI,WAAO,IAAD,EACWC,mBAAS,MADpB,mBACdC,EADc,KACJC,EADI,OAEWF,oBAAS,GAFpB,mBAEdG,EAFc,KAEJC,EAFI,KAarB,OACI,yBAAKC,UAAU,OACVF,EAAW,kBAAC,IAAD,CAAUG,GAAE,8BAAyBL,KAAiB,KAElE,yBAAKI,UAAU,oBAEX,wBAAIA,UAAU,cAAd,mCAEA,0BAAMA,UAAU,cAAcE,SAjBrB,SAAAC,GACjBA,EAAMC,iBACNL,GAAY,KAgBA,iCAAM,2BAAOM,SAbR,SAAAF,GACjBN,EAAYM,EAAMG,OAAOC,UAYb,KACA,4BAAQC,KAAK,UAAb,e,MC1BpBC,IAAMC,SAASC,QAAU,wBAEzB,IAsFeC,EAtFI,WAAO,IAAD,EACSjB,mBAAS,MADlB,mBAChBkB,EADgB,KACNC,EADM,OAEWnB,mBAAS,IAFpB,mBAEhBoB,EAFgB,KAELC,EAFK,KAGfC,EAAWC,cAAXD,OA2BR,OAPAE,qBAAU,WAjBRV,IACGW,IADH,iBACiBH,IACdI,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACPR,EAAYQ,MAEbC,OAAM,kBAAMT,EAAY,SAI3BL,IACGW,IADH,iBACiBH,EADjB,WAEGI,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACPN,EAAaM,MAEdC,OAAM,kBAAMP,EAAa,SAM3B,IAEHQ,QAAQC,IAAI,OAAQZ,EAAU,OAAQE,GAGpC,yBAAKf,UAAU,OACb,yBAAKA,UAAU,oBACb,kBAAC,IAAD,CAAM0B,MAAM,cAAczB,GAAG,kBAA7B,uBAGEY,EAKA,yBAAKb,UAAU,aAEb,yBACEA,UAAU,WACV2B,IAAKd,EAASe,WACdC,IAAKhB,EAASiB,OAEfjB,EAASiB,KACR,yBAAK9B,UAAU,aAAf,SAAkCa,EAASiB,MACzC,KACHjB,EAASkB,MACR,yBAAK/B,UAAU,cAAf,UAAoCa,EAASkB,OAC3C,KACHlB,EAASmB,UACR,yBAAKhC,UAAU,kBAAf,aACaa,EAASmB,WAEpB,KACHnB,EAASoB,UACR,yBAAKjC,UAAU,kBAAf,eACea,EAASoB,WAEtB,KACHpB,EAASqB,IACR,yBAAKlC,UAAU,YAAf,QAAgCa,EAASqB,KACvC,MA7BN,wBAAIlC,UAAU,aAAd,sEACgE,KAgClE,yBAAKA,UAAU,kBACZa,GAAYE,EACTA,EAAUoB,KAAI,SAACC,EAAMC,GAAP,OACZ,yBAAKrC,UAAU,YAAYqC,IAAG,eAAUA,IACtC,yBAAKrC,UAAU,aAAf,mBACe,uBAAGsC,KAAMF,EAAKG,UAAWH,EAAKN,WAIjD,SC5EdrB,IAAMC,SAASC,QAAU,wBAEzB,IAoBe6B,EApBH,WACV,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,GACrB,kBAAC,IAAD,CAAUzC,GAAG,qBAEf,kBAAC,IAAD,CAAOwC,KAAK,kBAAkBC,OAAO,GACnC,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,+BACV,kBAAC,EAAD,WCZQE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdjC,OAAM,SAAAkC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.228a2bee.chunk.js","sourcesContent":["import React, { useState } from '../../../node_modules/react';\r\nimport {\r\n    Redirect\r\n} from 'react-router-dom';\r\n\r\nimport './styles.css'\r\n\r\n\r\nconst SearchPage = () => {\r\n    const [userName, setUserName] = useState(null)\r\n    const [redirect, setRedirect] = useState(false)\r\n\r\n    const sendToResult = event => {\r\n        event.preventDefault()\r\n        setRedirect(true)\r\n    }\r\n\r\n    const handleChange = event => {\r\n        setUserName(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {redirect ? <Redirect to={`/desafio-stone/user/${userName}`} /> : null}\r\n\r\n            <div className=\"search-container\">  \r\n\r\n                <h2 className=\"form-title\">Busque um usuário do github.</h2>\r\n\r\n                <form className=\"form-search\" onSubmit={sendToResult}>\r\n                    <div>@<input onChange={handleChange}/> </div>\r\n                    <button type=\"submit\">Buscar</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchPage","import React, { useState, useEffect } from \"../../../node_modules/react\";\r\nimport axios from \"axios\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport \"./styles.css\";\r\n\r\naxios.defaults.baseURL = \"http://api.github.com\";\r\n\r\nconst ResultPage = () => {\r\n  const [userData, setUserData] = useState(null);\r\n  const [userRepos, setUserRepos] = useState([]);\r\n  const { userId } = useParams();\r\n\r\n  const getUser = () => {\r\n    axios\r\n      .get(`/users/${userId}`)\r\n      .then(({ data }) => {\r\n        setUserData(data);\r\n      })\r\n      .catch(() => setUserData(null));\r\n  };\r\n\r\n  const getRepos = () => {\r\n    axios\r\n      .get(`/users/${userId}/repos`)\r\n      .then(({ data }) => {\r\n        setUserRepos(data);\r\n      })\r\n      .catch(() => setUserRepos([]));\r\n  };\r\n\r\n  useEffect(() => {\r\n    getUser();\r\n    getRepos();\r\n  }, []);\r\n\r\n  console.log(\"user\", userData, \"repo\", userRepos);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"result-container\">\r\n        <Link class=\"back-button\" to=\"/desafio-stone\">\r\n          Voltar para a busca\r\n        </Link>\r\n        {!userData ? (\r\n          <h3 className=\"not-found\">\r\n            Usuário não encontrado. Volte para a busca e tente novamente.{\" \"}\r\n          </h3>\r\n        ) : (\r\n          <div className=\"user-data\">\r\n            {/* <h3>Dados do usuário:</h3> */}\r\n            <img\r\n              className=\"user-img\"\r\n              src={userData.avatar_url}\r\n              alt={userData.name}\r\n            />\r\n            {userData.name ? (\r\n              <div className=\"user-name\">Nome: {userData.name}</div>\r\n            ) : null}\r\n            {userData.email ? (\r\n              <div className=\"user-email\">Email: {userData.email}</div>\r\n            ) : null}\r\n            {userData.following ? (\r\n              <div className=\"user-following\">\r\n                Seguindo: {userData.following}\r\n              </div>\r\n            ) : null}\r\n            {userData.followers ? (\r\n              <div className=\"user-followers\">\r\n                Seguidores: {userData.followers}\r\n              </div>\r\n            ) : null}\r\n            {userData.bio ? (\r\n              <div className=\"user-bio\">Bio: {userData.bio}</div>\r\n            ) : null}\r\n          </div>\r\n        )}\r\n        {/* <h3>Repositórios:</h3>                   */}\r\n        <div className=\"repo-container\">\r\n          {userData && userRepos\r\n            ? userRepos.map((repo, key) => (\r\n                <div className=\"repo-info\" key={`repo-${key}`}>\r\n                  <div className=\"repo-link\">\r\n                    Repositório: <a href={repo.html_url}>{repo.name}</a>\r\n                  </div>\r\n                </div>\r\n              ))\r\n            : null}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResultPage;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport SearchPage from \"./components/SearchPage\";\nimport ResultPage from \"./components/ResultPage\";\nimport {\n  Redirect\n} from 'react-router-dom';\n\naxios.defaults.baseURL = \"http://api.github.com\";\n\nconst App = () => {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <Route path=\"/\" exact={true}>\n            <Redirect to=\"/desafio-stone/\" />\n          </Route>\n          <Route path=\"/desafio-stone/\" exact={true}>\n            <SearchPage />\n          </Route>\n          <Route path=\"/desafio-stone/user/:userId\">\n            <ResultPage />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}